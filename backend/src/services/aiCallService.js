const { PrismaClient } = require('@prisma/client');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const companyNumberService = require('./companyNumberService');
const emailService = require('./emailService');
const prisma = new PrismaClient();

class AICallService {
  constructor() {
    this.activeCalls = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    this.callTimeouts = new Map(); // –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
  }

  // –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
  async startCall(companyNumber, clientPhone) {
    try {
      console.log(`üìû Starting call from ${clientPhone} to ${companyNumber}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
      const verification = await companyNumberService.verifyNumberOwnership(companyNumber, clientPhone);
      
      if (!verification.valid) {
        console.log(`‚ùå Call rejected: ${verification.reason}`);
        return {
          success: false,
          reason: verification.reason,
          message: this.getRejectMessage(verification.reason)
        };
      }

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–≤–æ–Ω–∫–∞
      const callSession = await prisma.callSession.create({
        data: {
          userId: verification.user.id,
          companyNumber,
          clientPhone,
          status: 'in_progress',
          startTime: new Date()
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
      this.activeCalls.set(callSession.id, {
        session: callSession,
        user: verification.user,
        startTime: Date.now(),
        transcript: [],
        currentStep: 'greeting'
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç
      const timeout = setTimeout(() => {
        this.endCall(callSession.id, 'timeout');
      }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

      this.callTimeouts.set(callSession.id, timeout);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: verification.user.id },
        data: { registrationStep: 'call_completed' }
      });

      console.log(`‚úÖ Call started successfully for user ${verification.user.name}`);

      return {
        success: true,
        callSessionId: callSession.id,
        greeting: await this.generateGreeting(verification.user),
        user: verification.user
      };

    } catch (error) {
      console.error('‚ùå Error starting call:', error);
      return {
        success: false,
        reason: 'system_error',
        message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.'
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  async generateGreeting(user) {
    const greeting = `
      –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GeminiVoice AI Call Center!
      
      –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å, 
      –∫–∞–∫ –Ω–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å 
      –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏.
      
      –£ –Ω–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —è:
      
      1. –£–∑–Ω–∞—é –æ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
      2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      3. –ü—Ä–µ–¥–ª–æ–∂—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
      4. –†–∞—Å—Å—á–∏—Ç–∞—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é
      5. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      
      –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ 
      –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
    `;

    return greeting.trim();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  async processClientMessage(callSessionId, message) {
    try {
      const callData = this.activeCalls.get(callSessionId);
      if (!callData) {
        return { error: 'Call session not found' };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
      callData.transcript.push({
        timestamp: new Date(),
        speaker: 'client',
        message: message
      });

      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      const apiKey = await companyNumberService.getGeminiApiKey(callData.session.companyNumber);
      const genAI = new GoogleGenerativeAI(apiKey);
      const model = genAI.getGenerativeModel({ model: "gemini-pro" });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const response = await this.generateAIResponse(callData, message, model);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
      callData.transcript.push({
        timestamp: new Date(),
        speaker: 'ai',
        message: response
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
      this.activeCalls.set(callSessionId, callData);

      return {
        success: true,
        response: response,
        timeRemaining: this.getTimeRemaining(callData.startTime)
      };

    } catch (error) {
      console.error('‚ùå Error processing client message:', error);
      return {
        error: 'Failed to process message',
        response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å?'
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞
  async generateAIResponse(callData, clientMessage, model) {
    const context = this.buildConversationContext(callData);
    
    const prompt = `
      –¢—ã - –ê–ª–∏—Å–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç GeminiVoice AI Call Center.
      
      –ö–û–ù–¢–ï–ö–°–¢ –ö–û–ú–ü–ê–ù–ò–ò:
      GeminiVoice AI - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ AI.
      
      –ù–ê–®–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
      - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      - AI-—á–∞—Ç –±–æ—Ç—ã –¥–ª—è Telegram, WhatsApp, —Å–∞–π—Ç–æ–≤
      - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è email —Ä–∞—Å—Å—ã–ª–æ–∫
      - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
      - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏
      - –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏
      - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
      - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
      
      –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
      1. –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
      2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
      3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—é –≤—Ä–µ–º–µ–Ω–∏/–¥–µ–Ω–µ–≥
      4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      
      –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:
      ${context}
      
      –ü–û–°–õ–ï–î–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê:
      ${clientMessage}
      
      –ò–ù–°–¢–†–£–ö–¶–ò–ò:
      - –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
      - –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
      - –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
      - –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∏
      - –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
      - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      
      –û–¢–í–ï–¢:
    `;

    try {
      const result = await model.generateContent(prompt);
      const response = result.response;
      return response.text();
    } catch (error) {
      console.error('‚ùå Error generating AI response:', error);
      return '–ü–æ–Ω—è–ª –≤–∞—Å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è.';
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  buildConversationContext(callData) {
    return callData.transcript
      .slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
      .map(entry => `${entry.speaker === 'client' ? '–ö–ª–∏–µ–Ω—Ç' : 'AI'}: ${entry.message}`)
      .join('\n');
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  async endCall(callSessionId, reason = 'completed') {
    try {
      const callData = this.activeCalls.get(callSessionId);
      if (!callData) {
        return { error: 'Call session not found' };
      }

      const endTime = new Date();
      const duration = Math.floor((endTime - callData.session.startTime) / 1000);

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      const timeout = this.callTimeouts.get(callSessionId);
      if (timeout) {
        clearTimeout(timeout);
        this.callTimeouts.delete(callSessionId);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ
      const transcript = JSON.stringify(callData.transcript);
      await prisma.callSession.update({
        where: { id: callSessionId },
        data: {
          status: 'completed',
          endTime,
          duration,
          transcript
        }
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const finalMessage = reason === 'timeout' 
        ? this.generateTimeoutMessage()
        : this.generateCompletionMessage();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞
      this.analyzeCallWithGemini(callSessionId, callData);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      this.activeCalls.delete(callSessionId);

      console.log(`‚úÖ Call ${callSessionId} ended: ${reason}, duration: ${duration}s`);

      return {
        success: true,
        finalMessage,
        duration,
        reason
      };

    } catch (error) {
      console.error('‚ùå Error ending call:', error);
      return { error: 'Failed to end call' };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  generateTimeoutMessage() {
    return `
      –ù–∞—à–µ –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–µ—Å–µ–¥—É.
      
      –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å:
      - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      - –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥
      - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      - –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
      
      –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.
      –¢–∞–∫–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏—Ö –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
      
      –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ñ–¥—É –≤–∞—Å –≤ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ! üöÄ
    `;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  generateCompletionMessage() {
    return `
      –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
      
      –°–µ–π—á–∞—Å —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ 
      —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.
      
      –í —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ email:
      - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
      - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      - –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥
      - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
      
      –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è! –£–≤–∏–¥–∏–º—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ! üéØ
    `;
  }

  // –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é Gemini
  async analyzeCallWithGemini(callSessionId, callData) {
    try {
      console.log(`ü§ñ Starting AI analysis for call ${callSessionId}`);

      const apiKey = await companyNumberService.getGeminiApiKey(callData.session.companyNumber);
      const genAI = new GoogleGenerativeAI(apiKey);
      const model = genAI.getGenerativeModel({ model: "gemini-pro" });

      const transcript = callData.transcript
        .map(entry => `${entry.speaker === 'client' ? '–ö–ª–∏–µ–Ω—Ç' : 'AI'}: ${entry.message}`)
        .join('\n');

      const analysisPrompt = `
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        
        –¢–†–ê–ù–°–ö–†–ò–ü–¢ –†–ê–ó–ì–û–í–û–†–ê:
        ${transcript}
        
        –ó–ê–î–ê–ß–ê:
        –°–æ–∑–¥–∞–π JSON —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        
        {
          "clientNeeds": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞",
          "businessType": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞",
          "currentChallenges": ["—Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º"],
          "recommendedFeatures": [
            {
              "feature": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
              "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
              "benefit": "–ø–æ–ª—å–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
              "implementation": "–∫–∞–∫ –≤–Ω–µ–¥—Ä–∏—Ç—å"
            }
          ],
          "generatedPrompts": [
            {
              "type": "telegram_bot",
              "prompt": "–≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞",
              "useCase": "–¥–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
            },
            {
              "type": "voice_assistant",
              "prompt": "–ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞",
              "useCase": "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"
            }
          ],
          "automationSuggestions": [
            {
              "process": "–ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
              "solution": "—Ä–µ—à–µ–Ω–∏–µ",
              "timeSavings": "—ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö/–º–µ—Å—è—Ü",
              "moneySavings": "—ç–∫–æ–Ω–æ–º–∏—è –¥–µ–Ω–µ–≥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–º–µ—Å—è—Ü"
            }
          ],
          "estimatedSavings": {
            "timePerMonth": "—á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü",
            "moneyPerMonth": "–¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –º–µ—Å—è—Ü",
            "currentCosts": "—Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
            "automationLevel": "low/medium/high"
          }
        }
        
        –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
      `;

      const result = await model.generateContent(analysisPrompt);
      const analysisText = result.response.text();
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      let analysisData;
      try {
        // –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanJson = analysisText.replace(/```json\n?|\n?```/g, '').trim();
        analysisData = JSON.parse(cleanJson);
      } catch (parseError) {
        console.error('‚ùå Error parsing analysis JSON:', parseError);
        analysisData = {
          clientNeeds: "–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
          recommendedFeatures: [],
          generatedPrompts: [],
          automationSuggestions: [],
          estimatedSavings: { timePerMonth: 0, moneyPerMonth: 0 }
        };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É
      await prisma.aIAnalysis.create({
        data: {
          userId: callData.user.id,
          callSessionId: callSessionId,
          clientNeeds: analysisData.clientNeeds,
          recommendedFeatures: JSON.stringify(analysisData.recommendedFeatures),
          generatedPrompts: JSON.stringify(analysisData.generatedPrompts),
          automationSuggestions: JSON.stringify(analysisData.automationSuggestions),
          geminiResponse: analysisText
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
      if (analysisData.estimatedSavings) {
        await prisma.savingsCalculation.upsert({
          where: { userId: callData.user.id },
          update: {
            estimatedTimeSavings: parseInt(analysisData.estimatedSavings.timePerMonth) || 0,
            estimatedMoneySavings: parseFloat(analysisData.estimatedSavings.moneyPerMonth) || 0,
            currentCosts: parseFloat(analysisData.estimatedSavings.currentCosts) || 0,
            automationLevel: analysisData.estimatedSavings.automationLevel || 'medium',
            calculationData: JSON.stringify(analysisData)
          },
          create: {
            userId: callData.user.id,
            estimatedTimeSavings: parseInt(analysisData.estimatedSavings.timePerMonth) || 0,
            estimatedMoneySavings: parseFloat(analysisData.estimatedSavings.moneyPerMonth) || 0,
            currentCosts: parseFloat(analysisData.estimatedSavings.currentCosts) || 0,
            automationLevel: analysisData.estimatedSavings.automationLevel || 'medium',
            calculationData: JSON.stringify(analysisData)
          }
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: callData.user.id },
        data: { registrationStep: 'analysis_done' }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      await emailService.sendAnalysisResultEmail(
        callData.user.email,
        callData.user.name,
        analysisData
      );

      console.log(`‚úÖ AI analysis completed for user ${callData.user.name}`);

    } catch (error) {
      console.error('‚ùå Error analyzing call with Gemini:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  getRejectMessage(reason) {
    const messages = {
      'Number not assigned': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.',
      'Phone number mismatch': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.',
      'Verification error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    };

    return messages[reason] || '–ó–≤–æ–Ω–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç.';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
  getTimeRemaining(startTime) {
    const elapsed = Date.now() - startTime;
    const remaining = Math.max(0, (30 * 60 * 1000) - elapsed); // 30 –º–∏–Ω—É—Ç
    return Math.floor(remaining / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
  getActiveCalls() {
    const calls = [];
    for (const [sessionId, callData] of this.activeCalls) {
      calls.push({
        sessionId,
        user: callData.user.name,
        phone: callData.session.clientPhone,
        duration: Math.floor((Date.now() - callData.startTime) / 1000),
        timeRemaining: this.getTimeRemaining(callData.startTime)
      });
    }
    return calls;
  }
}

module.exports = new AICallService();