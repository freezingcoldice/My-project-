// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  phone             String?
  role              String   @default("AGENT")
  tenantId          String
  avatar            String?
  isActive          Boolean  @default(true)
  lastLogin         DateTime?
  emailVerified     Boolean  @default(false)
  emailVerifyToken  String?
  assignedNumber    String?  @unique
  registrationStep  String   @default("email_verification") // email_verification, phone_verification, call_scheduled, call_completed, analysis_done, subscription_offered
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  permissions       UserPermission[]
  preferences       UserPreferences?
  sessions          UserSession[]
  calls             Call[]
  campaigns         Campaign[]
  customers         Customer[]
  callSessions      CallSession[]
  aiAnalysis        AIAnalysis[]
  subscriptions     Subscription[]
  savingsCalculation SavingsCalculation?
  companyNumber     CompanyNumber?

  @@map("users")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  isActive    Boolean  @default(true)
  settings    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
  calls       Call[]
  campaigns   Campaign[]
  customers   Customer[]

  @@map("tenants")
}

model UserPermission {
  id         String @id @default(cuid())
  userId     String
  permission String
  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("user_permissions")
}

model UserPreferences {
  id            String  @id @default(cuid())
  userId        String  @unique
  theme         String  @default("system")
  language      String  @default("en")
  timezone      String  @default("UTC")
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  pushNotifications  Boolean @default(true)
  
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  refreshToken String? @unique
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Customer {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  firstName   String
  lastName    String
  email       String?
  phone       String
  address     String?
  tags        String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  calls       Call[]
  campaigns   CampaignCustomer[]

  @@map("customers")
}

model Campaign {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  name        String
  description String?
  type        String
  status      String   @default("DRAFT")
  startDate   DateTime?
  endDate     DateTime?
  settings    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  customers   CampaignCustomer[]
  calls       Call[]

  @@map("campaigns")
}

model CampaignCustomer {
  id         String @id @default(cuid())
  campaignId String
  customerId String
  status     String @default("pending")
  priority   Int    @default(1)
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([campaignId, customerId])
  @@map("campaign_customers")
}

model Call {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  customerId  String?
  campaignId  String?
  phoneNumber String
  direction   String
  status      String
  duration    Int?     // in seconds
  recording   String?  // URL to recording
  transcript  String?
  sentiment   String?
  outcome     String?
  notes       String?
  metadata    String?
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("calls")
}

model Analytics {
  id          String   @id @default(cuid())
  tenantId    String
  date        DateTime
  metric      String
  value       Float
  metadata    String?
  createdAt   DateTime @default(now())

  @@unique([tenantId, date, metric])
  @@map("analytics")
}

model SystemMetrics {
  id          String   @id @default(cuid())
  metric      String
  value       Float
  timestamp   DateTime @default(now())
  metadata    String?

  @@map("system_metrics")
}

model CompanyNumber {
  id          String   @id @default(cuid())
  number      String   @unique
  isAvailable Boolean  @default(true)
  assignedTo  String?  @unique
  modemId     String?
  geminiApiKey String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User?    @relation(fields: [assignedTo], references: [id])

  @@map("company_numbers")
}

model CallSession {
  id              String   @id @default(cuid())
  userId          String
  companyNumber   String
  clientPhone     String
  status          String   @default("scheduled") // scheduled, in_progress, completed, failed
  startTime       DateTime?
  endTime         DateTime?
  duration        Int?     // в секундах
  recordingUrl    String?
  transcript      String?
  aiResponse      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user            User     @relation(fields: [userId], references: [id])

  @@map("call_sessions")
}

model AIAnalysis {
  id                String   @id @default(cuid())
  userId            String
  callSessionId     String?
  clientNeeds       String?  // Что хочет клиент
  recommendedFeatures String? // Рекомендуемые функции (JSON)
  generatedPrompts  String?  // Сгенерированные промпты (JSON)
  automationSuggestions String? // Предложения по автоматизации (JSON)
  geminiResponse    String?  // Полный ответ от Gemini
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user              User     @relation(fields: [userId], references: [id])

  @@map("ai_analysis")
}

model SavingsCalculation {
  id                    String   @id @default(cuid())
  userId                String   @unique
  estimatedTimeSavings  Int?     // часов в месяц
  estimatedMoneySavings Float?   // долларов в месяц
  currentCosts          Float?   // текущие расходы
  potentialSavings      Float?   // потенциальная экономия
  automationLevel       String?  // low, medium, high
  calculationData       String?  // детальные данные расчета (JSON)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user                  User     @relation(fields: [userId], references: [id])

  @@map("savings_calculations")
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  plan          String   // basic, pro, enterprise
  status        String   @default("pending") // pending, active, cancelled, expired
  startDate     DateTime?
  endDate       DateTime?
  price         Float
  features      String?  // включенные функции (JSON)
  paymentMethod String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user          User     @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model ModemConfig {
  id           String   @id @default(cuid())
  modemId      String   @unique
  geminiApiKey String?
  isActive     Boolean  @default(true)
  assignedNumber String?
  maxConcurrentCalls Int @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("modem_configs")
}